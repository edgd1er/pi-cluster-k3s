---
- name: What is my inventory_hostname
  debug:
    msg: "inventory/actual hostname is {{ inventory_hostname }} / {{ ansible_hostname }}"

# Get some basic info
- name: Get Raspberry Pi type
  command: "raspi-config nonint get_pi_type"
  register: pi_type
  changed_when: False

- name: Show pi version
  debug:
    msg: "Pi version: {{ pi_type.stdout }}"
  changed_when: false

# Network interface names
- name: Get network names status
  command: "raspi-config nonint get_net_names"
  register: pi_netnames
  changed_when: False

- name: Print all available facts
  ansible.builtin.debug:
    var: ansible_facts
  when: false

- name: Update all packages to the latest version
  apt:
    upgrade: dist
    force_apt_get: yes
    autoclean: true
    autoremove: true
    update_cache: true
  #tags: always

- name: install required packages
  apt:
    state: present
    pkg: "{{ required_packages }}"
    autoclean: true
    autoremove: true
    update_cache: true
  when: required_packages| default([]) |length > 0
  #tags: always

# ---- ssh  ----
- name: configure ssh allow users
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^AllowUsers '
    line: AllowUsers {{ ssh_allow_users }}
  when: ssh_allow_users | default([]) |length > 0
  notify: restart systemd sshd
  tags: ssh

- name: add ssh deny users if ssh_deny_users is not empty
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: '^DenyUsers '
    line: DenyUsers {{ ssh_deny_users }}
  when: ssh_deny_users| default([])|length > 0
  notify: restart systemd sshd
  tags: ssh

- name: remove ssh deny users if ssh_deny_users is empty
  ansible.builtin.lineinfile:
    state: absent
    path: /etc/ssh/sshd_config
    regexp: '^DenyUsers '
    line: DenyUsers {{ ssh_deny_users }}
  when: ssh_deny_users| default([])|length == 0
  notify: restart systemd sshd
  tags: ssh

- name: configure sshd options
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^{{ item.split(' ')[0] }} "
    line: "{{ item }}"
  loop:
    - ChallengeResponseAuthentication no
    - PermitEmptyPasswords no
    - PasswordAuthentication yes
    - PermitRootLogin prohibit-password
  notify: restart systemd sshd
  tags: ssh

# ---- fail2ban ----
- name: add ignore ip to fail2ban sshd
  become: yes
  command: fail2ban-client set sshd addignoreip {{ fail2ban_sshd_ignoreip }}
  when: fail2ban_sshd_ignoreip|length >3
  notify: Reload systemd fail2ban
  tags: fail2ban

# ---- firewall ----
- name: firewall - install ufw
  apt:
    name: ufw
    state: latest
    update_cache: yes
  register: apt_action
  when: rasp_firewall
  failed_when: apt_action.failed
  tags: firewall

- name: display apt_action
  debug:
    var: apt_action
  when: false
  tags: firewall

- name: stop playbook
  meta: end_play
  when: false

- name: Active Firewall.
  ufw:
    state: enabled
    policy: deny
  when: rasp_firewall
  tags: firewall

- name: Open ports defined by user.
  ufw:
    rule: allow
    port: '{{ item }}'
    from_ip: 192.168.53.0/24
  with_items: "{{ rasp_open_firewall_port }}"
  when: rasp_firewall and rasp_open_firewall_port|length > 1
  tags: firewall

- name: Disable Firewall.
  ufw:
    state: disabled
  when: not rasp_firewall
  tags: firewall

# ---- sysstat ----
- name: configure sysstat
  ansible.builtin.lineinfile:
    path: /etc/default/sysstat
    regexp: '^ENABLED='
    line: ENABLED="{{ sysstat|lower }}"
  when: sysstat
  tags: sysstat

- name: Enable sysstat
  ansible.builtin.systemd:
    name: sysstat
    state: started
    enabled: yes
  when: sysstat
  notify:
    - "Reload systemd sysstat"
  tags: sysstat

- name: Create a /var/log/sysstat if it does not exist
  ansible.builtin.file:
    path: /var/log/sysstat/
    state: directory
    mode: '0744'
  when: sysstat
  tags: sysstat

- name: disable sysstat
  ansible.builtin.systemd:
    name: sysstat
    state: stopped
    enabled: no
  when: not sysstat
  notify:
    - "Stop systemd sysstat"
  tags: sysstat

# ---- nut client ----
- name: configure nut client
  ansible.builtin.lineinfile:
    path: /etc/nut/nut.conf
    regexp: '^MODE='
    line: MODE="{{ nut_mode }}"
  tags: nut

- name: Create nut conf files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0640
  loop:
    - { src: upsmon.conf.j2, dest: /etc/nut/upsmon.conf }
    - { src: upsd.users.j2, dest: /etc/nut/upsd.users }
    - { src: upssched.conf.j2, dest: /etc/nut/upssched.conf }
  notify:
    - "Reload systemd nut-client"
    - "Reload systemd nut-monitor"
  tags: nut

- name: Create upsd user file
  template:
    src: upsd.users.j2
    dest: /etc/nut/upsd.users
    mode: 0640
  notify:
    - "Reload systemd nut-client"
    - "Reload systemd nut-monitor"
  tags: nut

# - name: reboot
#  become: yes
#  ansible.builtin.reboot:
#    reboot_timeout: "{{ raspi_config_reboot_max_wait_time }}"

# - name: wait for reboot
#  wait_for_connection:
#    delay: "{{ raspi_config_reboot_min_time }}"
#    timeout: "{{ raspi_config_reboot_max_wait_time }}"
