---
- name: install required packages
  apt:
    state: latest
    pkg: "{{ required_packages }}"
    autoclean: true
    autoremove: true
    update_cache: true
  when: (required_packages is defined ) and (required_packages|length > 0)
  tags: [ nfs, nfsserver, nfsclient ]

- name: install extra packages
  apt:
    state: present
    autoclean: true
    autoremove: true
    update_cache: true
    pkg: "{{ extra_packages }}"
  when: (extra_packages is defined ) and (extra_packages|length > 0)
  tags: [ nfs, nfsserver, nfsclient ]

# ------------ nfs server ------------
- name: "nfsserver: install nfs service"
  apt:
    state: present
    name: nfs-kernel-server
  when: inventory_hostname in groups['k3s_coordinator']
  notify: stop nfsserver
  tags: [ nfs, nfsserver ]

- name: "nfsserver: create dir for cluster shared storage"
  ansible.builtin.file:
    path: "{{ mount_point_export_cluster }}"
    state: directory
    mode: 0777
    owner: root
    group: root
  when: inventory_hostname in groups['k3s_coordinator']
  tags: [ nfs, nfsserver ]

- name: "nfsserver: create dir for master shared storage"
  ansible.builtin.file:
    path: "{{ mount_point_export_master }}"
    state: directory
    mode: 0777
    owner: root
    group: root
  when: inventory_hostname in groups['k3s_coordinator']
  tags: [ nfs, nfsserver ]

- name: "nfsserver: get UUID_value from partition {{ cluster_name }}"
  # Read device information (always use unit when probing)
  shell:
    cmd: "set -o pipefail; blkid | grep {{ cluster_name }} |grep -Po '(?<= UUID=\")([^\"]+)'"
    executable: /bin/bash
  register: uuid_cluster_value
  when: inventory_hostname in groups['k3s_coordinator']
  tags: [ nfs, nfsserver ]

- name: "nfsserver: get UUID_value from partition {{ master_name }}"
  # Read device information (always use unit when probing)
  shell:
    cmd: "set -o pipefail; blkid | grep {{ master_name }} |grep -Po '(?<= UUID=\")([^\"]+)'"
    executable: /bin/bash
  register: uuid_master_value
  when: inventory_hostname in groups['k3s_coordinator']
  tags: [ nfs, nfsserver ]

- name: "nfsserver: Print uuid facts"
  debug:
    # var: ansible_facts
    var: "{{ item }}"
  with_items:
    - uuid_cluster_value.stdout
    - uuid_master_value.stdout
  when: inventory_hostname in groups['k3s_coordinator']
  tags: [ nfs, nfsserver ]

- name: "nfsserver: Mount up device by UUID"
  ansible.posix.mount:
    src: "UUID={{ item.u }}"
    path: "{{ item.p }}"
    fstype: ext4
    opts: defaults,noatime,errors=remount-ro,usrquota,grpquota
    state: mounted
  loop:
    - { u: "{{ uuid_master_value.stdout }}", p: "{{ mount_point_export_master }}" }
    - { u: "{{ uuid_cluster_value.stdout }}", p: "{{ mount_point_export_cluster }}" }
  when: inventory_hostname in groups['k3s_coordinator']
  tags: [ nfs, nfsserver ]

- name: "nfsserver: enable nfsv4 only"
  ansible.builtin.lineinfile:
    path: /etc/default/nfs-kernel-server
    regexp: "^{{ item.split('=')[0] }}="
    line: "{{ item }}"
  loop:
    - 'RPCMOUNTDOPTS="{{ nfsserver_rpcmountdopts }}"'
    - 'RPCNFSDOPTS="{{ nfsserver_rpcnfsdopts }}"'
  when: inventory_hostname in groups['k3s_coordinator']
  tags: [ nfs, nfsserver ]

- name: "nsfserver: disable rpcbind"
  become: yes
  ansible.builtin.shell: |
    set -o pipefail
    systemctl disable --now rpcbind.service rpcbind.socket
    systemctl mask rpcbind.service rpcbind.socket
  args:
    executable: "/usr/bin/bash"
  failed_when: false
  when: false
  tags: [ nfs ]

- name: "nfsserver: configure quota ports"
  ansible.builtin.lineinfile:
    path: /etc/default/quota
    regexp: "^{{ item.split('=')[0] }}="
    line: "{{ item }}"
  loop:
    - 'RPCMOUNTDOPTS="{{ nfsserver_rpcmountdopts }}"'
    - 'RPCNFSDOPTS="{{ nfsserver_rpcnfsdopts }}"'
  when: inventory_hostname in groups['k3s_coordinator'] and nfsclient_quota > 0
  tags: [ nfs, nfsserver ]

- name: "nfsserver: check quotas"
  ansible.builtin.command:
    cmd: "quotacheck -fugm {{ item }}"
  loop:
    - '{{ mount_point_export_master }}'
    - '{{ mount_point_export_cluster }}'
  when: inventory_hostname in groups['k3s_coordinator'] and nfsclient_quota > 0
  tags: [ nfs, nfsserver ]

- name: "nfsserver: activate quota"
  ansible.builtin.command:
    cmd: "quotaon -v {{ item }}"
  loop:
    - '{{ mount_point_export_master }}'
    - '{{ mount_point_export_cluster }}'
  when: inventory_hostname in groups['k3s_coordinator'] and nfsclient_quota > 0
  failed_when: false
  tags: [ nfs, nfsserver ]

- name: "nfsserver: define quota"
  become: yes
  ansible.builtin.command:
    cmd: "setquota -g users {{ nfsserver_quota_cluster }}"
  when: inventory_hostname in groups['k3s_coordinator'] and nfsserver_quota_cluster|length > 0
  failed_when: false
  tags: [ nfs, nfsserver ]

- name: "nfsserver: report quota"
  become: yes
  ansible.builtin.command:
    cmd: "repquota -vugsi  {{ item }}"
  register: rep_quota
  loop:
    - "{{ mount_point_export_master }}"
    - "{{ mount_point_export_cluster }}"
  when: inventory_hostname in groups['k3s_coordinator'] and nfsserver_quota_cluster|length > 0
  failed_when: false
  tags: [ nfs, nfsserver ]

- name: "nfsserver: display quotas"
  debug:
    var: rep_quota
  when: inventory_hostname in groups['k3s_coordinator']

- name: "nfsserver: Configure exports"
  template:
    src: exports.j2
    dest: "/etc/exports"
    owner: "root"
    group: "root"
    mode: "0644"
  when: inventory_hostname in groups['k3s_coordinator']
  tags: [ nfs, nfsserver ]

- name: "nfsserver: Enable and start nfsserver services"
  systemd:
    name: "{{ item }}"
    enabled: true
    state: started
  loop: "{{ nfsserver_services }}"
  when: nfs_enable and (nfsserver_services|length > 0) and (inventory_hostname in groups['k3s_coordinator'])
  notify:
    - reload nfsserver
    - export nfs filesystem for client
  tags: [ nfsserver, nfs ]

- name: "nfsserver: Stop and disable nfsserver services"
  systemd:
    name: "{{ item }}"
    enabled: false
    state: stopped
  loop: "{{ nfs-serve_services }}"
  when: (not nfs_enable|bool ) or ( nfsserver_services|length < 1 ) and (inventory_hostname in groups['k3s_coordinator'])
  tags: [ nfs, nfsserver ]

# ------------ nfs clients ------------
- name: configure nfs ports on client and server
  ansible.builtin.lineinfile:
    path: /etc/default/nfs-common
    regexp: "^{{ item.split('=')[0] }}="
    line: "{{ item }}"
  loop:
    - 'STATDOPTS="{{ nfs_statdopts }}"'
    - 'NEED_IDMAPD={{ nfsclient_idmap }}'
  when: nfs_enable|bool
  tags: [ nfs, nfsclient, nfsserver ]

- name: "nfsclient: create mount point for nfs client"
  ansible.builtin.file:
    path: "{{ mount_point_nfs }}"
    state: directory
    mode: 0777
    owner: root
    group: root
  when: inventory_hostname not in groups['k3s_coordinator']
  tags: [ nfs, nfsclient ]

- name: "nfsclient: configure clients mount w/o quota"
  ansible.posix.mount:
    src: "{{ nfsserver_name }}:{{ mount_point_export_cluster }}"
    path: "{{ mount_point_nfs }}"
    fstype: nfs4
    opts: "{{ nfsclient_options }}{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    boot: true
    state: mounted
  when: inventory_hostname not in groups['k3s_coordinator'] and nfsserver_quota_cluster|length == 0
  tags: [ nfs, nfsclient ]

- name: "nfsclient: configure clients mount with quota"
  ansible.posix.mount:
    src: "{{ nfsserver_name }}:{{ mount_point_export_cluster }}"
    path: "{{ mount_point_nfs }}"
    fstype: nfs4
    opts: "{{ nfsclient_options }}{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    state: mounted
  when: inventory_hostname not in groups['k3s_coordinator'] and nfsserver_quota_cluster|length > 0
  tags: [ nfs, nfsclient ]

# -----------------------------------------------------------
