---
- name: install required packages
  apt:
    state: present
    pkg: "{{ required_packages }}"
    autoclean: true
    autoremove: true
    update_cache: true
  when: (required_packages is defined ) and (required_packages|length > 0)

- name: install extra packages
  apt:
    state: present
    autoclean: true
    autoremove: true
    update_cache: true
    pkg: "{{ extra_packages }}"
  when: (extra_packages is defined ) and (extra_packages|length > 0)

# ------------ nfs server ------------
- name: "nfsserver: install nfs service"
  apt:
    state: present
    name: nfs-kernel-server
  when: inventory_hostname in groups['k3s_coordinator']
  tags: nfsserver

- name: "nfsserver: create dir for storage"
  ansible.builtin.file:
    path: "{{ mount_point_usb }}"
    state: directory
    mode: 0777
    owner: root
    group: root
  when: inventory_hostname in groups['k3s_coordinator']
  tags: nfsserver

- name: "nfsserver: get UUID_value from partition {{ cluster_name }}"
  # Read device information (always use unit when probing)
  shell:
    cmd: "set -o pipefail; blkid | grep {{ cluster_name }} |grep -Po '(?<= UUID=\")([^\"]+)'"
    executable: /bin/bash
  register: UUID_cluster_value
  when: inventory_hostname in groups['k3s_coordinator']
  tags: nfsserver

- name: "nfsserver: get UUID_value from partition {{ master_name }}"
  # Read device information (always use unit when probing)
  shell:
    cmd: "set -o pipefail; blkid | grep {{ master_name }} |grep -Po '(?<= UUID=\")([^\"]+)'"
    executable: /bin/bash
  register: UUID_master_value
  when: inventory_hostname in groups['k3s_coordinator']
  tags: nfsserver

- name: "nfs: Print all available facts"
  debug:
    #var: ansible_facts
    var: "{{ item }}"
  with_items:
    - UUID_cluster_value.stdout
    - UUID_master_value.stdout
  when: inventory_hostname in groups['k3s_coordinator']
  tags: nfsserver

- name: "nfsserver: Mount up device by UUID"
  ansible.posix.mount:
    src: UUID={{ UUID_cluster_value.stdout }}
    path: "{{ mount_point_usb_cluster }}"
    fstype: ext4
    opts: defaults,noatime
    state: mounted
  when: inventory_hostname in groups['k3s_coordinator']
  tags: nfsserver

- name: "nfsserver: Mount up device by UUID"
  ansible.posix.mount:
    src: UUID={{ UUID_master_value.stdout }}
    path: "{{ mount_point_usb_master }}"
    fstype: ext4
    opts: defaults,noatime
    state: mounted
  when: inventory_hostname in groups['k3s_coordinator']
  tags: nfsserver

- name: "nfsserver: Configure exports"
  template:
    src: exports.j2
    dest: "/etc/exports"
    owner: "root"
    group: "root"
    mode: "0644"
  when: inventory_hostname in groups['k3s_coordinator']
  tags: nfsserver

- name: "nfsserver: Enable and start nfsserver services"
  systemd:
    name: "{{ item }}"
    enabled: true
    state: started
  loop: "{{ nfsserver_services }}"
  when: nfs_enable and (nfsserver_services|length > 0) and (inventory_hostname in groups['k3s_coordinator'])
  tags: [ nfsserver ]
  notify:
    - reload nfsserver
    - export nfs filesystem for client

- name: "nfsserver: Stop and disable nfsserver services"
  systemd:
    name: "{{ item }}"
    enabled: false
    state: stopped
  loop: "{{ nfs-serve_services }}"
  when: (not nfs_enable|bool ) or ( nfsserver_services|length < 1 ) and (inventory_hostname in groups['k3s_coordinator'])
  tags: [ nfsserver ]

# ------------ nfs clients ------------

- name: "nfsclient: create mount point for nfs client"
  ansible.builtin.file:
    path: "{{ mount_point_nfs }}"
    state: directory
    mode: 0777
    owner: root
    group: root
  when: inventory_hostname not in groups['k3s_coordinator']
  tags: nfsclient

- name: "nfsclient: configure clients mount"
  ansible.posix.mount:
    src: "{{ nfsserver_name }}:{{ mount_point_usb_cluster }}"
    path: "{{ mount_point_nfs }}"
    fstype: nfs
    opts: "{{ nfsclient_options }}"
    state: mounted
  when: inventory_hostname not in groups['k3s_coordinator']
  tags: nfsclient

#-----------------------------------------------------------